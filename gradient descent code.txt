def build_training_model(X, Y, nn_hidden_dim, num_passes = 10000, print_loss = True):

	data_size = len(X)
	np.random.seed(0)
	W1 = np.random.randn(Config.nn_input_dim, nn_hidden_dim) / np.sqrt(Config.nn_input_dim) # Xavier's Intialization
	b1 = np.zeros((1, nn_hidden_dim))
	W2 = np.random.randn(nn_hidden_dim, Config.nn_output_dim) / np.sqrt(nn_hidden_dim)
	b2 = np.zeros((1, Config.nn_output_dim))
    

	model = {}

	for i in range(0, num_passes):

	    # Forward propagation
	    z1 = X.dot(W1) + b1
	    a1 = np.tanh(z1)
	    z2 = a1.dot(W2) + b2
	    exp_scores = np.exp(z2)
	    probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)

	    delta3 = probs
	    delta3[range(data_size), Y] -= 1
	    dW2 = (a1.T).dot(delta3)
	    db2 = np.sum(delta3, axis=0, keepdims=True)
	    delta2 = delta3.dot(W2.T) * (1 - np.power(a1, 2))
	    dW1 = np.dot(X.T, delta2)
	    db1 = np.sum(delta2, axis=0)

	    # Add regularization terms (b1 and b2 don't have regularization terms)
	    dW2 += Config.reg_lambda * W2
	    dW1 += Config.reg_lambda * W1

	    # Gradient descent parameter update
	    W1 += -Config.epsilon * dW1
	    b1 += -Config.epsilon * db1
	    W2 += -Config.epsilon * dW2
	    b2 += -Config.epsilon * db2

	    # Assign new parameters to the model
	    model = {'W1': W1, 'b1': b1, 'W2': W2, 'b2': b2}

	    # Optionally print the loss.
	    # This is expensive because it uses the whole dataset, so we don't want to do it too often.
	    if print_loss and i % 500 == 0:
	        print("Loss after iteration %i: %f" % (i, calculate_loss(model, X, Y)))

	return model
